package data.yummynoodlebar.persistence.integration;

import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNotNull;

import java.util.UUID;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import data.yummynoodlebar.config.GemfireConfiguration;
import data.yummynoodlebar.persistence.domain.OrderStatus;
import data.yummynoodlebar.persistence.domain.fixture.PersistenceFixture;
import data.yummynoodlebar.persistence.integration.fakecore.FakeCoreConfiguration;
import data.yummynoodlebar.persistence.repository.OrderStatusRepository;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { FakeCoreConfiguration.class, GemfireConfiguration.class })
public class OrderStatusRepositoryIntegrationTests
{
    /*
     * Data is being managed explicitly in the test rather than using the
     * declarative transaction management that was introduced in the JPA tests.
     * 
     * While GemFire does integrate with the Spring provided transactions, it
     * only supports Isolation.READ_COMMITTED. This means that once you write
     * data, it cannot be read, by any thread or process, until the surrounding
     * transaction is committed. Any test that wrote data within a transaction
     * would be unable to read it until the transaction finished.
     * 
     * For this reason the test is <b>NOT</b> marked as @Transactional so all
     * data access will not be transactionally managed within the tests. At the
     * start and end of the test, the region is purged by using the repository
     * deleteAll method generated by Spring Data.
     */

    @Autowired
    OrderStatusRepository ordersStatusRepository;

    @Before
    public void setup()
    {
        ordersStatusRepository.deleteAll();
    }

    @After
    public void teardown()
    {
        ordersStatusRepository.deleteAll();
    }

    @Test
    public void thatItemIsInsertedIntoRepoWorks() throws Exception
    {

        UUID key = UUID.randomUUID();

        OrderStatus orderStatus = PersistenceFixture.startedCooking(key);
        orderStatus.setId(key);

        ordersStatusRepository.save(orderStatus);

        OrderStatus retrievedOrderStatus = ordersStatusRepository.findOne(key);

        assertNotNull(retrievedOrderStatus);
        assertEquals(key, retrievedOrderStatus.getId());
    }
}
