package io.spring.soap.client;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/*
 * to generate this class, run:
 * $JAVA_HOME/bin/wsimport -keep http://localhost:9999/ws/hello?wsdl
 */
/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.6 in JDK 6 Generated
 * source version: 2.1
 * 
 */
@WebServiceClient(name = "SOAPImplService", targetNamespace = "http://soap.spring.io/", wsdlLocation = "http://localhost:9999/ws/hello?wsdl")
public class SOAPImplService
        extends Service
{

    private final static URL SOAPIMPLSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(io.spring.soap.client.SOAPImplService.class.getName());

    static
    {
        URL url = null;
        try
        {
            URL baseUrl;
            baseUrl = io.spring.soap.client.SOAPImplService.class.getResource(".");
            url = new URL(baseUrl, "http://localhost:9999/ws/hello?wsdl");
        }
        catch (MalformedURLException e)
        {
            logger.warning("Failed to create URL for the wsdl Location: 'http://localhost:9999/ws/hello?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        SOAPIMPLSERVICE_WSDL_LOCATION = url;
    }

    public SOAPImplService(URL wsdlLocation, QName serviceName)
    {
        super(wsdlLocation, serviceName);
    }

    public SOAPImplService()
    {
        super(SOAPIMPLSERVICE_WSDL_LOCATION, new QName("http://soap.spring.io/", "SOAPImplService"));
    }

    /**
     * 
     * @return returns SOAP
     */
    @WebEndpoint(name = "SOAPImplPort")
    public SOAP getSOAPImplPort()
    {
        return super.getPort(new QName("http://soap.spring.io/", "SOAPImplPort"), SOAP.class);
    }

    /**
     * 
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
     *            on the proxy. Supported features not in the
     *            <code>features</code> parameter will have their default
     *            values.
     * @return returns SOAP
     */
    @WebEndpoint(name = "SOAPImplPort")
    public SOAP getSOAPImplPort(WebServiceFeature... features)
    {
        return super.getPort(new QName("http://soap.spring.io/", "SOAPImplPort"), SOAP.class, features);
    }

}
